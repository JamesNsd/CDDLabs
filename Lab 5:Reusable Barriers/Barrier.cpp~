// Barrier.cpp --- 
// 
// Filename: Barrier.cpp
// Description: 
// Author: Joseph
// Maintainer: 
// Created: Tue Jan  8 12:14:02 2019 (+0000)
// Version: 
// Package-Requires: ()
// Last-Updated: Tue Jan  8 12:15:21 2019 (+0000)
//           By: Joseph
//     Update #: 2
// URL: 
// Doc URL: 
// Keywords: 
// Compatibility: 
// 
// 

// Commentary: 
// 
// 
// 
// 

// Change Log:
// 
// 
// 
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
// 
// 
// Code:
#include "Semaphore.h"
#include "Barrier.h"
#include <iostream>

/*!
    \fn Barrier::~Barrier()
    \brief destructor function of barrier
    Barrier destructor
*/
Barrier::~Barrier()
{
    //Nothing to do here
}
/*!
    \fn void Barrier::phaseOne()
    \brief The first phase of the rendezvous between n threads
    Using semaphores and mutex lock order the flow of all threads to wait at the end for the last thread to be ready before moving on
*/
void Barrier::phaseOne()
{
    mutexSem.Wait();
    ++barrierCount;
    if (barrierCount == numThreads)
    {
      std::cout << std::endl;
      second.Wait();   // close 2nd door
      first.Signal();  // open 1st door
    }
    mutexSem.Signal();
    first.Wait();
    first.Signal();
}
/*!
    \fn void Barrier::phaseTwo()
    \brief The second phase of the rendezvous between n threads
    sing semaphores and mutex lock order the flow of all threads to wait at the end for the last thread to be ready before moving on
*/
void Barrier::phaseTwo()
{
    mutexSem.Wait();
    --barrierCount;
    if (barrierCount == 0)
    {
      first.Wait();    //close first door
      second.Signal(); // open 2nd door
    }
    if (barrierCount == 0)
    {
      std::cout<< std::endl;
    }
    mutexSem.Signal();
    second.Wait();
    second.Signal();
}
/*!
    \fn void Barrier::wait()
    \brief The wait function runs phaseOne() and phaseTwo() sequentially 
*/
void Barrier::wait()
{
    phaseOne();
    phaseTwo();
}
// Barrier.cpp ends here
